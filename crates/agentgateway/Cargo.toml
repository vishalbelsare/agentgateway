[package]
name = "agentgateway"
version = { workspace = true }
license = { workspace = true }
edition = { workspace = true }
publish = { workspace = true }

[lib]
path = "src/lib.rs"

[features]
default = ["tls-ring"]
jemalloc = ["dep:tikv-jemallocator", "dep:jemalloc_pprof"]
ui = []
schema = ["schemars"]
tls-ring = ["rustls/ring", "tokio-rustls/ring"]
internal_benches = ["divan"]
testing = []

[dependencies]
a2a-sdk.workspace = true
agent-core.workspace = true
agent-hbone.workspace = true
agent-xds.workspace = true
anyhow.workspace = true
arc-swap.workspace = true
async-openai.workspace = true
async-trait.workspace = true
aws_event_stream_parser.workspace = true
aws-config.workspace = true
aws-credential-types.workspace = true
aws-sigv4.workspace = true
axum.workspace = true
axum-core.workspace = true
axum-extra.workspace = true
base64.workspace = true
bytes.workspace = true
chrono.workspace = true
clocksource.workspace = true
crossbeam.workspace = true
divan = { workspace = true, optional = true }
duration-str.workspace = true
fs-err = { workspace = true }
futures.workspace = true
futures-core.workspace = true
futures-util.workspace = true
google-cloud-auth.workspace = true
headers.workspace = true
hex.workspace = true
hickory-resolver.workspace = true
http.workspace = true
http-body.workspace = true
http-body-util.workspace = true
hyper.workspace = true
hyper-rustls.workspace = true
hyper-util.workspace = true
hyper-util-fork.workspace = true
include_dir.workspace = true
indexmap = { workspace = true }
ipnet.workspace = true
itertools.workspace = true
jsonwebtoken.workspace = true
lazy_static.workspace = true
minijinja.workspace = true
notify.workspace = true
notify-debouncer-full.workspace = true
num_cpus.workspace = true
once_cell.workspace = true
openapiv3.workspace = true
opentelemetry.workspace = true
opentelemetry-otlp.workspace = true
opentelemetry_sdk.workspace = true
parking_lot.workspace = true
phonenumber.workspace = true
pin-project-lite.workspace = true
prometheus-client.workspace = true
prost.workspace = true
prost-types.workspace = true
rand.workspace = true
rcgen.workspace = true
regex.workspace = true
reqwest.workspace = true
rmcp.workspace = true
rustls.workspace = true
rustls-native-certs.workspace = true
rustls-pemfile.workspace = true
rustls-pki-types.workspace = true
schemars = { workspace = true, optional = true }
secrecy.workspace = true
serde.workspace = true
serde-transcode.workspace = true
serde_json.workspace = true
serde_json_path_to_error.workspace = true
serde_regex.workspace = true
serde_with.workspace = true
serde_yaml.workspace = true
shellexpand.workspace = true
sse-stream.workspace = true
socket2.workspace = true
thiserror.workspace = true
tiktoken-rs.workspace = true
tokio = { workspace = true }
tokio-rustls.workspace = true
tokio-stream.workspace = true
tokio-util.workspace = true
tokio_sse_codec.workspace = true
tonic.workspace = true
tonic-prost.workspace = true
tower.workspace = true
tower-http.workspace = true
tower-serve-static.workspace = true
tracing.workspace = true
tracing-subscriber.workspace = true
url.workspace = true
x509-parser.workspace = true
serde_urlencoded.workspace = true
percent-encoding.workspace = true
http-serde.workspace = true
cel.workspace = true
tikv-jemallocator = { workspace = true, optional = true }
jemalloc_pprof = { workspace = true, optional = true }
frozen-collections.workspace = true
value-bag.workspace = true
core_affinity.workspace = true
macro_rules_attribute.workspace = true
heck.workspace = true
async-compression.workspace = true

# Linux only dependencies
[target.'cfg(target_family = "unix")'.dependencies]
pprof.workspace = true

# Windows only dependencies
[target.'cfg(target_family = "windows")'.dependencies]
which.workspace = true

[build-dependencies]
anyhow.workspace = true
prost-build.workspace = true
tonic-prost-build.workspace = true
tonic-build.workspace = true
protox.workspace = true

[dev-dependencies]
assert_matches.workspace = true
divan.workspace = true
insta.workspace = true
tempfile.workspace = true
tokio = { workspace = true, features = ["test-util"] }
wiremock.workspace = true
which.workspace = true
agentgateway = { version = "0.7.0", path = ".", default-features = false, features = ["testing"] }

[lints.clippy]
# This rule makes code more confusing
assigning_clones = "allow"
# This doesn't understand `strng` which we use everywhere
borrow_interior_mutable_const = "allow"
declare_interior_mutable_const = "allow"

[lints.rust]
# This rule makes code more confusing
mismatched_lifetime_syntaxes = "allow"

[[bench]]
name = "bench_tests"
harness = false
